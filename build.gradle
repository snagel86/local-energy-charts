plugins {
    id 'io.spring.dependency-management' version '1.1.4'
    id 'java'
    id 'com.matsuyoido.frontend' version '2.0.2'
}

ext {
    springVersion = '3.1.6'
    openApiVersion = '2.0.4'
}

subprojects {
    group = 'de.local.energy.charts'
    version = '1.0.4'

    apply plugin: 'java'
    apply plugin: 'io.spring.dependency-management'

    java {
        sourceCompatibility = "17"
    }

    jar {
        enabled = true
    }

    repositories {
        mavenCentral()
    }

    dependencyManagement {
        imports {
            mavenBom("org.springframework.boot:spring-boot-dependencies:$springVersion")
        }
    }

    dependencies {
        compileOnly 'org.projectlombok:lombok:1.18.30'
        annotationProcessor 'org.projectlombok:lombok:1.18.30'
        implementation 'org.mapstruct:mapstruct:1.5.5.Final'
        annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'
        implementation 'io.projectreactor:reactor-core'
        implementation 'org.springframework:spring-context'
        implementation 'org.springframework.data:spring-data-mongodb'
        implementation 'com.google.guava:guava:32.1.3-jre'

        testImplementation 'org.projectlombok:lombok:1.18.30'
        testAnnotationProcessor 'org.projectlombok:lombok:1.18.30'
        testImplementation 'org.springframework:spring-test'
        testImplementation 'org.springframework.boot:spring-boot-test'
        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.0'
        testImplementation 'org.assertj:assertj-core:3.24.2'
        testImplementation 'org.mockito:mockito-core:5.7.0'
        testImplementation 'org.mockito:mockito-junit-jupiter'
        testImplementation 'io.projectreactor:reactor-test'
    }
}

jar {
    enabled = false
}

/**
 * see 'Webflow, Highcharts & build the Website' in README
 */

frontend {
    style {
        css {
            inDir = file("$projectDir/web/localenergycharts.webflow")
            outDir = file("$projectDir/web/build")
        }
    }
    script {
        // JavaScripts from webflow
        js {
            inDir = file("$projectDir/web/localenergycharts.webflow/js")
            outDir = file("$projectDir/web/build/js")
        }

        // JavaScript to request the API of the application
        js {
            inDir = file("$projectDir/web/js")
            outDir = file("$projectDir/web/build/js")
        }
    }
}
tasks.named('build').configure { dependsOn('cssMinify') }
tasks.named('build').configure { dependsOn('jsMinify') }

tasks.register('configureBaseApiUrl') {
    doLast {
        if (project.hasProperty("baseApiUrl")) {
            def localEnergyChartsJS = new File("$projectDir/web/build/js/localenergycharts.min.js")
            def text = localEnergyChartsJS.text
            text = (text =~ /http:\/\/localhost:8080/).replaceFirst(project.getProperty("baseApiUrl"))
            localEnergyChartsJS.write(text)
        }
    }
}
tasks.named('configureBaseApiUrl').configure { dependsOn('jsMinify') }
tasks.named('build').configure { dependsOn('configureBaseApiUrl') }

task cleanWebBuild(type: Delete) {
    delete 'web/build'
}
tasks.named('clean').configure { dependsOn('cleanWebBuild') }

task copyWebflowContents(type: Copy) {
    from('web/localenergycharts.webflow/') {
        include '**/*.html'
        filter { line -> line.replaceAll('css/localenergycharts.webflow.css', 'css/localenergycharts.webflow.min.css') }
        filter { line -> line.replaceAll('css/normalize.css', 'css/normalize.min.css') }
        filter { line -> line.replaceAll('css/webflow.css', 'css/webflow.min.css') }
        filter { line -> line.replaceAll('js/localenergycharts.js', 'js/localenergycharts.min.js') }
        filter { line -> line.replaceAll('js/webflow.js', 'js/webflow.min.js') }
    }
    from('web/localenergycharts.webflow/') {
        exclude '**/*.html'
    }

    into 'web/build'
    exclude 'css/', 'js/'
}
tasks.named('build').configure { dependsOn('copyWebflowContents') }
